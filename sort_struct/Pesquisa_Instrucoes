#include <stdio.h>
#include <stdlib.h>

typedef struct{
    int cod;
    char str[17];
}Item;

#define key(a) (a.cod)
#define less(a, b) (key(a) < key(b))
#define exch(a, b) {Item t=a; a=b; b=t;}
#define cmpexch(a, b) {if(less(b, a)) exch(a, b)}

void merge(Item *v, int l, int m, int r);
void merge_sort(Item *v, int l, int r);
int binary_search(Item *p, int x, int inicio, int fim);

int main()
{
    int nc, i;
    scanf("%d", &nc);
    Item d[nc];

    for(i=0; i<nc; i++)
        scanf("%d %s", &d[i].cod, d[i].str);
    
    merge_sort(d, 0, nc-1);

    int buffer_cod, ind;
    while(scanf("%d", &buffer_cod) != EOF){
        ind = binary_search(d, buffer_cod, 0, nc-1);
        if(ind != -1)
            printf("%s\n", d[ind].str);
        else
            printf("undefined\n");
    }

    /*
    for(i=0; i<nc; i++)
        printf("%d  -   %s\n\n", d[i].cod, d[i].str);
        */
}


void merge(Item *v, int l, int m, int r){
    Item *p = malloc(sizeof(Item) * (r-l+1));
    int ia=l, ib=m+1, iaux=0, i;

    while(ia <= m && ib <= r)
    {
        if(less(v[ia], v[ib]))
            p[iaux++] = v[ia++];
        else
            p[iaux++] = v[ib++];
    }
    while(ia <= m)
        p[iaux++] = v[ia++];
    while(ib <= r)
        p[iaux++] = v[ib++];

    iaux = 0;
    for(i=l; i<=r; i++)
        v[i] = p[iaux++];
    free(p);
}

void merge_sort(Item *v, int l, int r){
    if(r-l == 0)
        return;
    int m = (r+l)/2;
    merge_sort(v, l, m);
    merge_sort(v, m+1, r);
    merge(v, l, m, r);
}

int binary_search(Item *p, int x, int inicio, int fim){
    int meio = (inicio+fim)/2;
    
    if(inicio > fim)
        return -1;

    if(x > key(p[meio]))
        return binary_search(p, x, meio+1, fim);
    if(x < key(p[meio]))
        return binary_search(p, x, inicio, meio-1);
    if(key(p[meio]) == x)
        return meio;
}
